---
title: "HW 01"
author: "SWETHA SIRIPURAPU"
format: html
toc: true
---

## 1 - Road traffic accidents in Edinburgh

```{r label-me-1}
library(dsbox)  # Load the package
library(dplyr)


accidents <- accidents %>%
  mutate(weekday_indicator = ifelse(day_of_week %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"), "Weekday", "Weekend"))

library(ggplot2)
    severity_colors <- c("purple", "lightgreen", "yellow") 
  ggplot(accidents, aes(x = time, fill = severity)) +
   geom_density(alpha = 0.5) +
   #labs(title = "Weekdays", x = "Time of the day", y = "Density") +
   labs(title = "Number of accidents throughout the day\nBy day of week and severity",x="Time of the day", y="Density")+
      scale_fill_manual(values = setNames(severity_colors, unique(accidents$severity))) +
   facet_wrap(~weekday_indicator, ncol = 1)  # Display weekday plot
```

  
Data Interpretation:
=>Slight accidents: We can see that most of the slightest number of accidents occured between 2PM - 5PM during both weekdays and weekends.  

=>Fatal Accidents: There were no fatal accidents on the weekend and those that occured during the weekdays were the highest between 10AM to 2PM.

=>Serious Accidents: The highest number of serious accidents are between 5 PM - 7 PM

Out of all the three, slight accidents are more likely to occur, on both weekends and weekdays.
  


## 2 - NYC marathon winners

```{r label-me-2}

library(ggplot2)
library(openintro)
data("nyc_marathon")
str(nyc_marathon)


# Histogram

ggplot(nyc_marathon, mapping = aes( x = time_hrs)) +
  geom_histogram(binwidth = 0.01, fill="lightgreen", color="lightgreen") +
  labs(x = "Time",
        title="Histogram"
       )

# Single boxplot for all runners
ggplot(nyc_marathon, aes( x = time_hrs))+
   geom_boxplot(fill="red", color="red", varwidth = TRUE, alpha=0.2) +
    labs(x = "Time",
        title="Boxplot"
       )


```


=>Features Apparent in the Histogram but Not in the Box Plot:

The histogram can show the actual distribution of the data, enabling you to see modes, skewness etc.You can see the number of occurrences within each time bin, which isn't clear in a box plot.

=>Features Apparent in the Box Plot but Not in the Histogram:

Central Tendency and Spread: The box plot clearly shows the median and the interquartile range, providing a clear summary of the central tendency and spread of the data.Box plots are excellent for identifying outliers clearly, which might not be as apparent in a histogram.


```{r}

# Create side-by-side box plots with custom colors
ggplot(nyc_marathon, aes(x=division, y=time_hrs, fill=division)) +
  geom_boxplot() +
  scale_fill_manual(values=c("Men" = rgb(0.2,0.8,0.5,1), "Women" = rgb(0.8,0.4,0.5,1))) +
  labs(title="Distribution of Marathon Times by Gender", x="Division", y="Marathon Time (hours)") +
  guides(fill=guide_legend(title="DIVISION")) +  # Added this line to capitalize the legend title
  theme_minimal()


```

Firstly, the median time required for women to complete the marathon is notably greater than that for men, indicating a higher central tendency in women’s marathon completion times. Moreover, the interquartile range for women is larger compared to men, signifying a broader spread of completion times centered around the median, and possibly hinting at a more diverse range of performances within the women's group. In terms of outliers, which represent runners with exceptionally fast or slow times, both groups exhibit a notable presence. The men's group has 7 outliers concentrated at the upper end of the time distribution, whereas the women's group hosts 8, dispersed more broadly across the range. This dispersion in the women’s group may imply a wider variance in the extremes of performance, with some runners completing the marathon substantially faster or slower than the majority. 

```{r}

# Create side-by-side box plots without fill color to avoid redundancy
ggplot(nyc_marathon, aes(x=division, y=time_hrs, fill=division)) +
  geom_boxplot() +
  scale_fill_manual(values=c("Men" = rgb(0.2,0.8,0.5,1), "Women" = rgb(0.8,0.4,0.5,1))) +
  labs(title="Distribution of Marathon Times by Gender", x="Division", y="Marathon Time (hours)") +
  theme_minimal() +
  theme(legend.position="none")

```

In the plot created for part (b), we used different colors to represent the 'Men' and 'Women' divisions, which introduced a legend to indicate which color represented which group. However, since the x-axis labels ('Men' and 'Women') already clearly indicate which box plot corresponds to which group, the legend become redundant information in this visualization.In part (c), we removed the legend, focusing solely on the distribution of the marathon times as represented by the box plots.


```{r}

ggplot(nyc_marathon, aes(x=year, y=time_hrs, color=division, shape=division)) +
  geom_point() +
  geom_line() +
  scale_color_manual(values = c("Men" = rgb(0.2,0.8,0.5,1), "Women" = rgb(0.8,0.4,0.5,1))) +
  scale_shape_manual(values = c("Men" = 19, "Women" = 17)) +
  labs(title = "Marathon Times of Men and Women Over the Years", x = "Year", y = "Marathon Time (hours)") +
  theme_minimal()

```

1. This plot enables us to visualize the trend in marathon times across years, which wasn't possible with the previous box plots that only showed the distribution of times within specific gender groups.We can now compare the marathon times for men and women on a year-to-year basis.
2. Over the years, we might notice if the gap in performance between the genders is narrowing, remaining constant, or widening, which is a dynamic view not achievable with a static box plot.
3. Each point on the plot represents an individual observation (a specific marathon time in a specific year), allowing for a more granular view of the data, compared to the box plots which summarize the data distribution in a compact form


## 3 - US counties

```{r}

data("county")
ggplot(county) +
  geom_point(aes(x = median_edu, y = median_hh_income)) +
  geom_boxplot(aes(x = smoking_ban, y = pop2017))

```

It doesn't make sense because the scatter plot and the box plot are fundamentally different types of visualizations used for different purposes. The scatter plot is used to visualize the relationship between two continuous variables, whereas the box plot is used to visualize the distribution of a continuous variable across different levels of a categorical variable.Combining them in this way, without adjusting the scales or making other modifications, may result in a plot that doesn't effectively convey any

```{r}

ggplot(county %>% filter(!is.na(median_edu))) + 
  geom_point(aes(x = homeownership, y = poverty)) + 
  facet_grid(median_edu ~ .)

ggplot(county %>% filter(!is.na(median_edu))) + 
  geom_point(aes(x = homeownership, y = poverty)) + 
  facet_grid(. ~ median_edu)

```

Comparing the poverty levels across different median education levels would arguably be easier with the second plot where the facets are arranged in columns. This layout allows for a horizontal read, which is generally easier when trying to compare a single variable (poverty in this case) across different levels of another variable (median education levels), since the y-axes are aligned, facilitating direct visual comparison.

#3c)
```{r}
install.packages("gridExtra")
library(gridExtra)

#A
A<- ggplot(county,mapping=aes(homeownership,poverty))+
  geom_point()+
  labs(title = "Plot A")

#B
B<- ggplot(county,mapping=aes(homeownership,poverty))+
  geom_point()+
  geom_smooth(method = "loess",se=FALSE)+
  labs(title = "Plot B")

#C
C<- ggplot(county, aes(x = homeownership, y = poverty)) +
  geom_point(color = "black") +
  geom_smooth(mapping = aes(group = metro), color = "green", se = FALSE) +
  guides(color=FALSE) +
  theme_minimal()

#D
D<- ggplot(county, aes(x = homeownership, y = poverty)) +
  geom_smooth(mapping = aes(group = metro), se = FALSE) +
  geom_point()

#E
E<- ggplot(county, aes(x = homeownership, y = poverty)) +
  geom_point(aes(color = metro)) +
  geom_smooth(se = FALSE, aes(linetype = metro, group = metro))

#F
F<-ggplot(county, aes(x = homeownership, y = poverty, colour = metro)) +
  geom_point() +
  geom_smooth(se = FALSE) +
  theme_minimal()

#G
G<-ggplot(county, aes(x = homeownership, y = poverty)) +
  geom_point(aes(color = metro)) +
  geom_smooth(se = FALSE, aes(group = 1))

#H
H<-ggplot(county,mapping=aes(homeownership,poverty))+
  geom_point(aes(color = metro))+
    labs(title = "Plot H")

grid.arrange(A, B, C, D, nrow = 2) 
grid.arrange( E, F, G, H, nrow = 2) 

```

## 4 - Rental apartments in SF

```{r}


# Load necessary packages
library(vctrs)
library(tidyverse)
library(tidytuesdayR)

# Load the data
data <- tt_load("2022-07-05")$rent

sf_data <- data %>% 
  filter(city == "san francisco", room_in_apt == 0) %>% 
  filter(nhood %in% c("alamo square", "bayview", "candlestick point", "castro", "CCSF", "cole valley", "downtown", "hayes valley")) %>% 
  mutate(price_per_bed = price / beds) %>% 
  group_by(year, nhood) %>% 
  summarize(price_per_bed = mean(price_per_bed, na.rm = TRUE), .groups = 'drop')

# Calculate the maximum price_per_bed for y-axis limit
max_price_per_bed <- max(sf_data$price_per_bed, na.rm = TRUE)

# Data Visualization
ggplot(sf_data, aes(x = year, y = price_per_bed, color = nhood)) + 
  geom_line() +
  geom_point() +
  facet_wrap(~ nhood, scales = "free_y") +
  labs(title = "Rental Price per Bedroom Over Time in San Francisco", x = "Year", y = "Price per Bedroom") +
  theme_minimal() +
  scale_x_continuous(breaks = seq(min(sf_data$year, na.rm = TRUE), max(sf_data$year, na.rm = TRUE), by = 3)) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  coord_cartesian(ylim = c(NA, max_price_per_bed * 1.05))  # Extend y-axis to 105% of the maximum value

```

I chose to code such that it would help me focus on specific details - rental prices per bedroom in eight different neighborhoods from the years 2001 to 2016. I considered including box plots, as my focus was on a time-series analysis, I gravitated towards line graphs. They seemed to offer a clearer and continuous narrative of the year-wise price evolution.

I noticed some distinct patterns over the years. Between 2001 and 2005, the neighborhoods of Downtown and Bayview offered more affordable options compared to Castro and Hayes Valley, which seemed to have steadier, slightly higher prices. Moving into 2006 to 2010, there was a noticeable decrease in rental prices across most neighborhoods, particularly around 2010.

Furthermore, I observed that from 2011 to 2016, the rental market appeared stable with most neighborhoods not experiencing significant fluctuations. Notably, Downtown had the lowest rents, whereas Alamo Square commanded the highest rental prices during this period. 

## 5 - Napoleon’s march.

```{r}

#I have copied the below code from the articles I found really interesting:
#1.http://euclid.psych.yorku.ca/www/psy6135/tutorials/Minard.html
#2. https://www.andrewheiss.com/blog/2017/08/10/exploring-minards-1812-plot-with-ggplot2/

#Installing package
install.packages("HistData")


library(ggplot2)
library(scales)        
library(grid)          
library(gridExtra)  
library(dplyr) 

#Getting troops data from HisData
data(Minard.troops, package="HistData")

#Getting cities data from HisData
data(Minard.cities, package="HistData")

#Plotting troops graph
breaks <- c(1, 2, 3) * 10^5 
ggplot(Minard.troops, aes(long, lat)) +
        geom_path(aes(size = survivors, colour = direction, group = group),
                  lineend="round") +
   labs(title = "Napoleon’s march",
       x = "Longitude",
       y = "Latitude",
       )+
    scale_size("Survivors", range = c(1,10), #c(0.5, 15),
               breaks=breaks, labels=scales::comma(breaks)) +
    scale_color_manual("Direction", 
                       values = c("darkgreen", "darkblue"), 
                       labels=c("Advance", "Retreat"))
# Assigning the previous plot to plot_troops using last_plot()
plot_troops <- last_plot()

# Plotting the cities data

# Using ggrepel to automatically move the labels away from points and to ensure none of the labels overlap.
if (!require(ggrepel)) {install.packages("ggrepel"); require(ggrepel)}
library(ggrepel)
plot_troops +   
    geom_point(data = Minard.cities) +
    geom_text_repel(data = Minard.cities, aes(label = city))

#Assigning the previous plot to plot_troops_cities
plot_troops_cities <- last_plot()


# Plotting the temperature data
data(Minard.temp, package="HistData")

Minard.temp <- Minard.temp %>%
    mutate(label = paste0(temp, "° ", date))
head(Minard.temp$label)

ggplot(Minard.temp, aes(long, temp)) +
    geom_path(color="grey", size=1.5) +
    geom_point(size=1) +
  labs(title = "Napoleon’s march",
       x = "Longitude",
       y = "Temperature",
       )+
  geom_text_repel(aes(label=label), size=2.5)
plot_temp <- last_plot()

# Arranging both the plots together
grid.arrange(plot_troops_cities, plot_temp)

# Fixing the cities plot by getting rid of ggplot2 theme elements, removing the legends, getting rid of x and y axis label scles, and setting the x axis limits to a range that will coincide with tjose for the plot of temperature.
# Using coord_cartesian to set limit on x-axis

plot_troops_cities +
  coord_cartesian(xlim = c(24, 38)) +
  labs(x = NULL, y = NULL) +
  guides(color = FALSE, size = FALSE) +
  theme_void()

plot_troops_cities_fixed <- last_plot()  

# # Fixing the troops plot
# Using coord_cartesian to set limit on x-axis
plot_temp + 
  coord_cartesian(xlim = c(24, 38)) +
  labs(x = NULL, y="Temperature") + 
  theme_bw() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        panel.grid.minor.y = element_blank(),
        axis.text.x = element_blank(), axis.ticks = element_blank(),
        panel.border = element_blank())

# Assigning the previous graph to plot_temp_fixed
plot_temp_fixed <- last_plot()

# Arranging the fixed plots together
grid.arrange(plot_troops_cities_fixed, plot_temp_fixed, nrow=2, heights=c(3.5, 1.2))

#grid.rect adds a border around entire graph
grid.rect(width = .99, height = .99, gp = gpar(lwd = 2, col = "gray", fill = NA))

```

Description of the code in my own words:

The visualization is divided into two major parts: the first part (plot_minard) illustrates the journey of the troops, including the survivors and their direction of movement (advance or retreat), using different colors (blue and green) and line sizes to indicate the number of survivors. The cities they passed are annotated on the graph.
The second part (plot_temp) depicts the temperature changes experienced during the campaign, with lines indicating the temperature trend and points marking the specific data entries along with date annotations. In the troop movement plot, I chose dark green to depict the advancing troops and dark blue for the retreat. For clarity, I labeled the cities along their route, and the number of survivors is represented by the thickness of the lines. To illustrate the harsh weather conditions faced by the troops, I created a temperature trend plot beneath the troop movement. Here, I've highlighted specific temperature readings with annotated date labels. I ensured both plots aligned perfectly along the longitudinal axis for a cohesive look. To make the visualization more streamlined, I removed unnecessary legends, axis labels, and grid lines. Finally, I framed the entire visualization with a subtle gray border for a polished finish.
